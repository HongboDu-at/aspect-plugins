load("@aspect_bazel_lib//lib:diff_test.bzl", "diff_test")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("//release:release.bzl", "local_plugin")

# Run this target to update the go_* rules in this file
# bazel run //:gazelle
gazelle(name = "gazelle")

# Run this target to update the go.bzl file in this folder
# bazel run //:update_go_deps
gazelle(
    name = "update_go_deps",
    args = [
        "-from_file=go.mod",
        "-to_macro=go.bzl%deps",
        "-prune",
    ],
    command = "update-repos",
)

# gazelle:prefix github.com/HongboDu-at/aspect-plugins
# Buildozer ships with BUILD files but doesn't follow our naming convention
# gazelle:resolve go github.com/bazelbuild/buildtools/edit @com_github_bazelbuild_buildtools//edit:go_default_library
go_library(
    name = "aspect-cli-plugin_lib",
    srcs = ["plugin.go"],
    importpath = "github.com/HongboDu-at/aspect-plugins",
    visibility = ["//:__subpackages__"],
    deps = [
        "@build_aspect_cli//bazel/buildeventstream",
        "@build_aspect_cli//pkg/plugin/sdk/v1alpha3/config",
        "@build_aspect_cli//pkg/plugin/sdk/v1alpha3/plugin",
        "@com_github_hashicorp_go_plugin//:go-plugin",
    ],
)

# Only used for local development.
# Release binaries are created by the target in /release
go_binary(
    name = "aspect-cli-plugin",
    embed = [":aspect-cli-plugin_lib"],
    visibility = ["//visibility:public"],
)

# Copy the plugin to bazel-bin/plugin and checksum it.
# Referenced by the .aspect/cli/config.yaml in the `From:` line.
local_plugin(
    name = "dev",
    binary = ":aspect-cli-plugin",
    path = "plugin",
)

# Local dev target: bazel test --build_event_json_file=bep.json :dev-diff1 :dev-diff2
diff_test(
    name = "dev-diff1",
    file1 = "tests/file1.txt",
    file2 = "tests/file2.txt",
    tags = ["manual"],
)

diff_test(
    name = "dev-diff2",
    file1 = "tests/file1.txt",
    file2 = "tests/file3.txt",
    tags = ["manual"],
)
